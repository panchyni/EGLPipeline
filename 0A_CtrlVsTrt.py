# IMPORT
import sys
import numpy
from scipy import stats

# FUNCTIONS

def CreatePositionDictionary(files):
    ''' Combine SNPs from multiple files into a single positional dictionary '''

    position_dict = {}
    for f in files:
        for ln in [ln.strip() for ln in open(f,"r").readlines()]:
            split_ln = ln.strip().split("\t")
            position = int(split_ln[1])
            frequency = float(split_ln[-1])
            if position in position_dict.keys():
                position_dict[position].append(frequency)
            else:
                position_dict[position] = [frequency]    
    return position_dict

def GetPositionFreqs(position_dict,keys):
    ''' Get frequencies from a position dictionary using keys and returns
        a single list '''

    out_list = []
    for k in keys:
        out_list.extend(position_dict[k])
    return out_list

# MAIN

print'''

!!!IMPORTANT!!! Requires numpy and scipy v. > 0.13.0

Stand-alone script for calculation the signifiance of the difference
in allele frequency between Treatment and Control across a windowed
region on the genome for a specific time-point.

In the future, the functionality of this script should be added to
"0_ComparsionToInocWrapper.py".

Takes a control file [1, see "0A_ControlFileTemplate.ctl"] which
specifies all paramters

This pipline uses filtered & merged SNPs generated by "0_ComparsionToInocWrapper.py".

'''

# Read Input
control_file = [ln.strip() for ln in open(sys.argv[1],"r").readlines()]

# Read parameters
parameter_dictionary = {}
for index in range(len(control_file)):
    param_ln = control_file[index]
    try:
        [name,value] = param_ln.split("\t")
        parameter_dictionary[name] = value
    except ValueError as e:
       e.args += ("Control file: line " + str(index+1),)
       raise e

Ctrl_SNP_Files = parameter_dictionary["CtrlFiles"].split(",")
Trt_SNP_files = parameter_dictionary["TrtFiles"].split(",")

# Generate a dictionary of values from Ctrl files
ctrl_position_dict = CreatePositionDictionary(Ctrl_SNP_Files)
trt_position_dict = CreatePositionDictionary(Trt_SNP_files)

# Find the max position amognst the two dictionaries
max_key = max([max(ctrl_position_dict.keys()),max(trt_position_dict.keys())])

# Make a list of windows based on the size and iteration of the window
window_end_list = range(int(parameter_dictionary['Wsize']),max_key-int(parameter_dictionary['Witer']),int(parameter_dictionary['Witer']))

# Generate regions

output = []
for w in window_end_list:
      
      # Get SNP positions from each dictionary
      ctrl_position_keys = [i for i in ctrl_position_dict.keys() if i < w and i >= w-int(parameter_dictionary['Wsize'])]
      trt_position_keys = [i for i in trt_position_dict.keys() if i < w and i >= w-int(parameter_dictionary['Wsize'])]
      
      # Define window ID
      window_id = str(w - int(parameter_dictionary['Wsize'])) + "_" + str(w)
 
      # Check that the # of SNPs is good for both sets
      ctrl_SNP_number = len(ctrl_position_keys)
      trt_SNP_number = len(trt_position_keys)

      if ctrl_SNP_number >= int(parameter_dictionary['minSNP']) and trt_SNP_number >= int(parameter_dictionary['minSNP']):
          
          # Get allele frequencies for each set
          ctrl_freq_array = numpy.array(GetPositionFreqs(ctrl_position_dict,ctrl_position_keys))
          trt_freq_array = numpy.array(GetPositionFreqs(trt_position_dict,trt_position_keys))
          
          # Calcualte mean difference relative to trt
          diff = trt_freq_array.mean() - ctrl_freq_array.mean()
         
          # Do stat tests
          [ttest_stat,ttest_pv] = stats.ttest_ind(ctrl_freq_array,trt_freq_array,equal_var=False)
          # mannwhitneyu doesn't have an "alternative" argument in Scipy 0.13.0, the most recent Scipy which has not other dependecies on python
          #[mannu_stat,umann_pv] = stats.mannwhitneyu(ctrl_freq_array,trt_freq_array,alternative="two-sided")
          try:
              [mannu_stat,umann_pv] = stats.mannwhitneyu(ctrl_freq_array,trt_freq_array)
          except ValueError:
              [mannu_stat,umann_pv] = ["NA","NA"]

          output.append(window_id + "\t" + str(ctrl_freq_array.mean()) + "\t" + str(ctrl_freq_array.std()) + "\t" + str(trt_freq_array.mean()) + "\t" + str(trt_freq_array.std()) + "\t" + str(diff) + "\t" + str(ttest_stat) + "\t" + str(ttest_pv) + "\t" + str(mannu_stat) + "\t" + str(umann_pv) + "\n")

# Write output
output_file = open(sys.argv[1] + ".WindowedDiffWithStats","w")
output_file.write("Window\tCtrlMean\tCtrlStdv\tTrtMean\tTrtStdv\tDiff\tTtestStat\tTtestPv\tMannUStat\tMannUPv\n")
output_file.write("".join(output))
output_file.close()
